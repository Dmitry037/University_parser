function onOpen(e) {
  CalendarApp.getUi()
      .createMenu('Расписание') // Название вашего меню
      .addItem('Импортировать расписание', 'importScheduleFromMenu') // Пункт меню и функция, которую он вызывает
      .addItem('Очистить расписание', 'deleteEventsNextWeekFromMenu')
      .addToUi();
}


function importScheduleFromMenu() {
  importSchedule(); // Вызываем основную функцию
}

function deleteEventsNextWeekFromMenu(){
  deleteEventsNextWeek();
}



function importSchedule() {
    const parsedSchedule = getScheduleFromExternalParser(); // Раскомментируйте, когда будет реальный парсер.


  if (!parsedSchedule) {
    Logger.log('Не удалось получить расписание.');
    return;
  }

  const calendar = CalendarApp.getDefaultCalendar();
  const today = new Date();
  const currentDayOfWeek = today.getDay(); // Получаем текущий день недели (0-Воскресенье, 1-Понедельник, ..., 6-Суббота)

    // Словарь для соответствия дней недели
    const dayOfWeekMap = {
        'понедельник': 1,
        'вторник': 2,
        'среда': 3,
        'четверг': 4,
        'пятница': 5,
        'суббота': 6,
        'воскресенье': 0, // В JavaScript воскресенье - 0
    };


  // Перебираем дни недели
  for (const dayOfWeek in parsedSchedule) {
    if (parsedSchedule.hasOwnProperty(dayOfWeek)) {
      const eventsForDay = parsedSchedule[dayOfWeek];

      //Определеяем день недели
      const targetDayOfWeek = dayOfWeekMap[dayOfWeek.toLowerCase()];

        if(targetDayOfWeek === undefined){
            Logger.log(`Неизвестный день недели: ${dayOfWeek}`);
            continue;
        }

      // Вычисляем разницу в днях.
      let dayOffset = targetDayOfWeek - currentDayOfWeek;

       // Если целевой день на этой неделе уже прошел, добавляем 7 дней (переходим на следующую неделю).
       if (dayOffset < 0) {
          dayOffset += 7;
        }


      // Перебираем события в текущем дне
      for (const item of eventsForDay) {
        try {
          // Парсим время начала и окончания
          const [startTime, endTime] = item.time.split(' - ');
          const [startHours, startMinutes] = startTime.split(':').map(Number);
          const [endHours, endMinutes] = endTime.split(':').map(Number);

          //Создаем копию сегодняшней даты
          const startDate = new Date(today);
          startDate.setDate(today.getDate() + dayOffset); // Устанавливаем правильную дату
          startDate.setHours(startHours, startMinutes, 0, 0); // Устанавливаем время

          const endDate = new Date(today);
          endDate.setDate(today.getDate() + dayOffset);    // Устанавливаем правильную дату
          endDate.setHours(endHours, endMinutes, 0, 0);      // Устанавливаем время

          //Проверка на неправильные даты
           if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
            Logger.log(`Некорректный формат времени для события: ${item.discipline} в ${dayOfWeek}`);
            continue; // Переходим к следующему событию
            }

          // Корректировка даты, если событие переходит на следующий день
          if (endDate < startDate) {
            endDate.setDate(endDate.getDate() + 1);
          }



          // Формируем название события
          const title = `${item.type}: ${item.discipline}`;

          //определяем цвет
          let colorId;
          switch (item.type) {
            case 'Лекция':
              colorId = '10';
              break;
            case 'Практика':
              colorId = '7';
              break;
            case 'Лабораторная':
              colorId = '3';
              break;
            default:
              colorId = '6';
            // Код, если выражение не совпало ни с одним из значений
          }

          // Создаем событие
          const event = calendar.createEvent(
            title,
            startDate,
            endDate,
            {
              location: item.place,
              description: `Тип занятия: ${item.type}\nМесто: ${item.place}`,
            }
          );

          event.setColor(colorId);

          Logger.log(`Создано событие: ${event.getTitle()} (${dayOfWeek})`);
          Logger.log("colorId:", color);

        } catch (error) {
          Logger.log(`Ошибка при создании события для ${item.discipline} в ${dayOfWeek}: ${error}`);
        }
      }
    }
  }
}



// Функция для получения данных от внешнего парсера (замените URL)
function getScheduleFromExternalParser() {
  const url = 'http://176.109.106.34:8000/api/myinfo/'; //  URL вашего парсера!
  try {
    const response = UrlFetchApp.fetch(url, { muteHttpExceptions: true }); // Добавляем muteHttpExceptions
    const statusCode = response.getResponseCode();

    if (statusCode === 200) {
      const json = response.getContentText();
      const schedule = JSON.parse(json);
      return schedule;
    } else {
      Logger.log(`Ошибка при запросе к парсеру.  Код ответа: ${statusCode}`);
      // Можно добавить обработку разных кодов ошибок (404, 500 и т.д.)
      return null;
    }

  } catch (error) {
    Logger.log(`Ошибка при получении расписания от парсера: ${error}`);
    return null; // Возвращаем null в случае ошибки
  }
}

// Функция для создания триггера (оставляем как есть) -- ОСТАВЛЯЕМ БЕЗ ИЗМЕНЕНИЙ
function createTimeDrivenTriggers() {
  const projectTriggers = ScriptApp.getProjectTriggers();
  for (const trigger of projectTriggers) {
    ScriptApp.deleteTrigger(trigger);
  }
  ScriptApp.newTrigger('importSchedule')
    .timeBased()
    .everyDays(1)
    .atHour(8)
    .create();
}

// Функция для удаления триггеров (оставляем как есть)
function deleteTriggers() {
  const projectTriggers = ScriptApp.getProjectTriggers();
  for (const trigger of projectTriggers) {
    ScriptApp.deleteTrigger(trigger);
  }
}

function deleteEventsNextWeek() {
  // Получаем календарь по умолчанию
  const calendar = CalendarApp.getDefaultCalendar();

  // Получаем текущую дату
  const today = new Date();

  // Определяем начало следующей недели (понедельник)
  const startOfNextWeek = new Date(today);
  const daysUntilMonday = (8 - today.getDay()) % 7 || 7; // Вычисляем, сколько дней до понедельника
  startOfNextWeek.setDate(today.getDate() + daysUntilMonday);
  startOfNextWeek.setHours(0, 0, 0, 0); // Устанавливаем начало дня

  // Определяем конец следующей недели (воскресенье)
  const endOfNextWeek = new Date(startOfNextWeek);
  endOfNextWeek.setDate(startOfNextWeek.getDate() + 6);
  endOfNextWeek.setHours(23, 59, 59, 999); // Устанавливаем конец дня

  // Получаем все события за следующую неделю
  const events = calendar.getEvents(startOfNextWeek, endOfNextWeek);

  // Перебираем все события
  for (const event of events) {
    const startTime = event.getStartTime();
    const endTime = event.getEndTime();

    // Получаем часы начала и окончания события
    const startHour = startTime.getHours();
    const startMinutes = startTime.getMinutes();
    const endHour = endTime.getHours();
    const endMinutes = endTime.getMinutes();

    // Проверяем, попадает ли событие в диапазон 8:00–16:00
    const startInRange = (startHour > 8 || (startHour === 8 && startMinutes >= 0));
    const endInRange = (endHour < 16 || (endHour === 16 && endMinutes <= 0));

    // Если событие полностью или частично попадает в диапазон 8:00–16:00, удаляем его
    if (startInRange && endInRange) {
      Logger.log(`Удаляется событие: ${event.getTitle()} (${startTime.toLocaleString()} - ${endTime.toLocaleString()})`);
      event.deleteEvent();
    }
  }

  Logger.log('Удаление событий завершено.');
}

// Функция для создания триггера (опционально, если нужно запускать автоматически)
function createTimeDrivenTrigger() {
  ScriptApp.newTrigger('deleteEventsNextWeek')
    .timeBased()
    .everyWeeks(1) // Запускать раз в неделю
    .onWeekDay(ScriptApp.WeekDay.SUNDAY) // Например, в воскресенье
    .atHour(23) // В 23:00
    .create();
}

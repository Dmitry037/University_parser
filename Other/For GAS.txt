// Основная функция импорта
function importSchedule() {
  const parsedSchedule = getScheduleFromExternalParser();

  if (!parsedSchedule) {
    Logger.log('❌ Не удалось получить расписание.');
    return;
  }

  const calendar = CalendarApp.getDefaultCalendar();

  const dayOfWeekMap = {
    'понедельник': 1,
    'вторник': 2,
    'среда': 3,
    'четверг': 4,
    'пятница': 5,
    'суббота': 6
    // воскресенье не обрабатываем
  };

  for (const dayOfWeek in parsedSchedule) {
    if (!parsedSchedule.hasOwnProperty(dayOfWeek)) continue;

    const eventsForDay = parsedSchedule[dayOfWeek];
    const targetDay = dayOfWeekMap[dayOfWeek.toLowerCase()];

    if (targetDay === undefined) {
      Logger.log(`⚠️ Неизвестный день недели: ${dayOfWeek}`);
      continue;
    }

    // Получаем дату нужного дня следующей недели
    const eventDate = getDateForNextWeekday(targetDay);

    for (const item of eventsForDay) {
      try {
        const [startTime, endTime] = item.time.split(' - ');
        const [startHours, startMinutes] = startTime.split(':').map(Number);
        const [endHours, endMinutes] = endTime.split(':').map(Number);

        const startDate = new Date(eventDate);
        startDate.setHours(startHours, startMinutes, 0, 0);

        const endDate = new Date(eventDate);
        endDate.setHours(endHours, endMinutes, 0, 0);

        // Проверка времени
        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
          Logger.log(`❌ Некорректное время: ${item.time} (${item.discipline})`);
          continue;
        }

        // Если пара идёт через полночь
        if (endDate < startDate) {
          endDate.setDate(endDate.getDate() + 1);
        }

        const title = `${item.type}: ${item.discipline}`;

        let colorId;
        switch (item.type.toLowerCase()) {
          case 'лекция': colorId = '10'; break;
          case 'практика': colorId = '7'; break;
          case 'лабораторная': colorId = '3'; break;
          default: colorId = '6'; // Другое
        }

        const event = calendar.createEvent(title, startDate, endDate, {
          location: item.place,
          description: `Тип занятия: ${item.type}\nМесто: ${item.place}`,
        });

        event.setColor(colorId);

        Logger.log(`✅ Событие создано: ${title} (${dayOfWeek})`);

      } catch (error) {
        Logger.log(`❌ Ошибка при создании события для ${item.discipline} (${dayOfWeek}): ${error}`);
      }
    }
  }
}

// Функция для получения данных от внешнего парсера (замените URL)
function getScheduleFromExternalParser() {
  const url = 'http://176.109.106.34:8000/api/myinfo/'; //  URL вашего парсера!
  try {
    const response = UrlFetchApp.fetch(url, { muteHttpExceptions: true }); // Добавляем muteHttpExceptions
    const statusCode = response.getResponseCode();

    if (statusCode === 200) {
      const json = response.getContentText();
      const schedule = JSON.parse(json);
      return schedule;
    } else {
      Logger.log(`Ошибка при запросе к парсеру.  Код ответа: ${statusCode}`);
      // Можно добавить обработку разных кодов ошибок (404, 500 и т.д.)
      return null;
    }

  } catch (error) {
    Logger.log(`Ошибка при получении расписания от парсера: ${error}`);
    return null; // Возвращаем null в случае ошибки
  }
}

// Функция для создания триггера (оставляем как есть) -- ОСТАВЛЯЕМ БЕЗ ИЗМЕНЕНИЙ
function createTimeDrivenTriggers() {
  const projectTriggers = ScriptApp.getProjectTriggers();
  for (const trigger of projectTriggers) {
    ScriptApp.deleteTrigger(trigger);
  }
  ScriptApp.newTrigger('importSchedule')
    .timeBased()
    .onWeekDay(ScriptApp.WeekDay.MONDAY)
    .atHour(1)
    .create();
}

// Функция для удаления триггеров (оставляем как есть)
function deleteTriggers() {
  const projectTriggers = ScriptApp.getProjectTriggers();
  for (const trigger of projectTriggers) {
    ScriptApp.deleteTrigger(trigger);
  }
}

function deleteEventsNextWeek() {
  // Получаем календарь по умолчанию
  const calendar = CalendarApp.getDefaultCalendar();

  // Получаем текущую дату
  const today = new Date();

  // Определяем начало следующей недели (понедельник)
  const startOfNextWeek = new Date(today);
  const daysUntilMonday = (8 - today.getDay()) % 7 || 7; // Вычисляем, сколько дней до понедельника
  startOfNextWeek.setDate(today.getDate() + daysUntilMonday);
  startOfNextWeek.setHours(0, 0, 0, 0); // Устанавливаем начало дня

  // Определяем конец следующей недели (воскресенье)
  const endOfNextWeek = new Date(startOfNextWeek);
  endOfNextWeek.setDate(startOfNextWeek.getDate() + 6);
  endOfNextWeek.setHours(23, 59, 59, 999); // Устанавливаем конец дня

  // Получаем все события за следующую неделю
  const events = calendar.getEvents(startOfNextWeek, endOfNextWeek);

  // Перебираем все события
  for (const event of events) {
    const startTime = event.getStartTime();
    const endTime = event.getEndTime();

    // Получаем часы начала и окончания события
    const startHour = startTime.getHours();
    const startMinutes = startTime.getMinutes();
    const endHour = endTime.getHours();
    const endMinutes = endTime.getMinutes();

    // Проверяем, попадает ли событие в диапазон 8:00–17:00
    const startInRange = (startHour > 8 || (startHour === 8 && startMinutes >= 0));
    const endInRange = (endHour < 16 || (endHour === 17 && endMinutes <= 0));

    // Если событие полностью или частично попадает в диапазон 8:00–16:00, удаляем его
    if (startInRange && endInRange) {
      Logger.log(`Удаляется событие: ${event.getTitle()} (${startTime.toLocaleString()} - ${endTime.toLocaleString()})`);
      event.deleteEvent();
    }
  }

  Logger.log('Удаление событий завершено.');
}

function getDateForNextWeekday(targetWeekday) {
  const today = new Date();
  const dayOfWeekToday = today.getDay(); // 0 (вс) - 6 (сб)

  // Получаем ближайший понедельник следующей недели
  const daysUntilNextMonday = (8 - dayOfWeekToday) % 7 || 7;
  const nextMonday = new Date(today);
  nextMonday.setDate(today.getDate() + daysUntilNextMonday);
  nextMonday.setHours(0, 0, 0, 0);

  // Смещаем от понедельника на нужный день
  const targetDate = new Date(nextMonday);
  const offsetFromMonday = targetWeekday - 1;
  targetDate.setDate(nextMonday.getDate() + offsetFromMonday);

  return targetDate;
}
